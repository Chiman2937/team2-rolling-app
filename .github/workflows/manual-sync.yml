name: Manual Issue Sync to Notion

on:
  workflow_dispatch:

jobs:
  sync-all-issues:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}

    steps:
      - name: Sync All GitHub Issues to Notion
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const notionHeaders = {
              "Authorization": `Bearer ${process.env.NOTION_TOKEN}`,
              "Notion-Version": "2022-06-28",
              "Content-Type": "application/json"
            };

            const perPage = 100;
            let page = 1;
            let allIssues = [];

            while (true) {
              const res = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/issues?state=all&per_page=${perPage}&page=${page}`, {
                headers: {
                  Authorization: `Bearer ${process.env.GH_TOKEN}`
                }
              });
              const data = await res.json();
              if (!data.length) break;
              allIssues.push(...data.filter(issue => !issue.pull_request));
              page++;
            }

            console.log(`üìå Ï¥ù ${allIssues.length}Í∞ú Ïù¥Ïäà ÎèôÍ∏∞Ìôî ÏãúÏûë`);

            const findNotionPageByIssueNumber = async (issueNumber) => {
              const searchRes = await fetch("https://api.notion.com/v1/databases/" + process.env.NOTION_DATABASE_ID + "/query", {
                method: "POST",
                headers: notionHeaders,
                body: JSON.stringify({
                  filter: {
                    property: "Issue Number",
                    rich_text: {
                      equals: `#${issueNumber}`
                    }
                  }
                })
              });
              const searchData = await searchRes.json();
              return searchData.results.length > 0;
            };

            for (const issue of allIssues) {
              const alreadyExists = await findNotionPageByIssueNumber(issue.number);
              if (alreadyExists) {
                console.log(`‚ö†Ô∏è Ïù¥ÎØ∏ Îì±Î°ùÎêú Ïù¥Ïäà: #${issue.number} - ${issue.title}`);
                continue;
              }

              const createdDate = new Date(issue.created_at).toISOString().split('T')[0];
              const targetMatch = issue.body?.match(/‚è∞ Target ÎÇ†Ïßú[\s\S]*?\n+(\d{4}-\d{2}-\d{2})/);
              const targetDate = targetMatch ? targetMatch[1] : createdDate;

              const notionBody = {
                parent: { database_id: process.env.NOTION_DATABASE_ID },
                properties: {
                  Issue: {
                    title: [{ text: { content: issue.title } }]
                  },
                  "Issue Number": {
                    rich_text: [{ text: { content: `#${issue.number}` } }]
                  },
                  Date: {
                    date: { start: createdDate, end: targetDate }
                  },
                  Status: {
                    select: { name: issue.state === "closed" ? "Done" : "Todo" }
                  },
                  URL: {
                    url: issue.html_url
                  }
                }
              };

              if (issue.milestone?.title) {
                notionBody.properties.Milestone = {
                  rich_text: [{ text: { content: issue.milestone.title } }]
                };
              }

              const res = await fetch("https://api.notion.com/v1/pages", {
                method: "POST",
                headers: notionHeaders,
                body: JSON.stringify(notionBody)
              });

              if (!res.ok) {
                const error = await res.text();
                console.log(`‚ùå Ïã§Ìå®: #${issue.number} - ${issue.title}: ${error}`);
              } else {
                console.log(`‚úÖ Îì±Î°ù ÏôÑÎ£å: #${issue.number} - ${issue.title}`);
              }
            }
